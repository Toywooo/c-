//计算器类，分别用普通写法和多态技术，设计实现两个操作数惊醒运算的计算器类
#include<iostream>
using namespace std;
#include<string>
class Calculator
{
public: 
	int getresult(string oper)
	{
		if(oper=="+")
		{
			return num1+num2;
		}

		else if(oper=="-")
		{
			return num1-num2;
		}
		else if(oper=="*")
		{
			return num1*num2;
		}
	}
	//如果需要拓展新的功能，需要修改源码
	//在真正的开发中提倡开闭原则
	//开闭原则：对拓展进行开放，对修改进行关闭
	int num1;
	int num2;
};
void test01()
{
	Calculator c;
	c.num1=10;
	c.num2=20;
	cout<<"num1+num2="<<c.getresult("+")<<endl;
	cout<<"num1-num2="<<c.getresult("-")<<endl;
	cout<<"num1*num2="<<c.getresult("*")<<endl;
}
//利用多态实现计算器
//多态优点：1.组织结构清晰 2.可读性强 3.对于前期和后期的扩展以及维护性高
class AbstractCalculator
{
public:
	virtual int getresult()
	{
		return 0;
	}
	int num1;
	int num2;
};
class AddCalculator:public AbstractCalculator
{
public:
	virtual int getresult()
	{
		return num1 + num2;
	}
};
class SubCalculator:public AbstractCalculator
{
public:
	virtual int getresult()
	{
		return num1 - num2;
	}
};
class MulCalculator:public AbstractCalculator
{
public:
	virtual int getresult()
	{
		return num1 * num2;
	}
};
void test02()
{
	AbstractCalculator *abc=new AddCalculator;
	abc->num1=10;
	abc->num2=10;
	cout<<abc->num1<<"+"<<abc->num2<<"="<<abc->getresult()<<endl;
	delete abc;
	abc=new SubCalculator;
	abc->num1=10;
	abc->num2=10;
	cout<<abc->num1<<"-"<<abc->num2<<"="<<abc->getresult()<<endl;
	delete abc;
	abc=new MulCalculator;
	abc->num1=10;
	abc->num2=10;
	cout<<abc->num1<<"*"<<abc->num2<<"="<<abc->getresult()<<endl;
}
int main()
{
	//test01();
	test02();
	system("pause");
	return 0;
}
