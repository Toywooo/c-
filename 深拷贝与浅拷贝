//浅拷贝：简单的赋值拷贝操作
//深拷贝：在堆区重新申请空间，进行拷贝操作
//构造函数的调用规则：1.如果用户定义有参构造函数，c++不再提供默认无参构造，但是会提供默认拷贝构造函数
//                    2.如果用户定义拷贝构造函数，c++不再提供其他构造函数
#include<iostream>
using namespace std;

class person
{
public:
	person()
	{
		cout<<"person的默认构造函数调用"<<endl;	
	}
	person(int age,int height)
	{
		m_age=age;
		m_height=new int(height);
		cout<<"preson的有参构造函数调用"<<endl;
	}
	//自己实现拷贝构造函数，解决浅拷贝带来的问题
	person(const person &p)
	{
		cout<<"拷贝构造函数的调用"<<endl;
		m_age=p.m_age;
		//m_height=p.m_height; 编译器默认实现就是这行代码
		//深拷贝操作
		m_height=new int(*p.m_height);//c++中主要利用new在堆区开辟内存，int *a=new in(10);
	}
	~person()//析构代码，将堆区开辟数据做释放操作
	{
		if(m_height!=NULL)//深拷贝带来的问题就是堆区的内存重复释放造成程序错误，浅拷贝的问题要利用深拷贝来解决
		{
			delete m_height;
			m_height=NULL;//为避免野指针，需要将内存置为空
		}
		cout<<"preson的析构函数调用"<<endl;
	}
	int m_age;
	int *m_height;//身高的数据存放在堆区，利用new，new是在堆区申请空间
};
void test1()
{
	person p1(18,160);
	cout<<"p1的年龄为："<<p1.m_age<<"身高为："<<*p1.m_height<<endl;
	person p2(p1);
	cout<<"p2的年龄为："<<p2.m_age<<"身高为："<<*p2.m_height<<endl;
}
int main()
{
	test1();
	system("pause");
	return 0;
}
