#include<iostream>
using namespace std;
class Animal
{
public:
	int m_age;
};
//利用虚继承可以解决菱形继承的问题
//在继承之前加上virtual
//Animal类称为虚基类
class Sheep:virtual public Animal
{
	
};
class Tuo:virtual public Animal
{

};
class SheepTuo:public Sheep,public Tuo
{

};
void test01()
{
	SheepTuo st;
	st.Sheep::m_age=18;
	st.Tuo::m_age=30;
	//当菱形继承，两个父类拥有相同的数据，需要加作用域区分
	cout<<"st.Sheep::m_age="<<st.Sheep::m_age<<endl;
	cout<<"st.Tuo::m_age="<<st.Tuo::m_age<<endl;
	//这份数据只要有一份就可以了，菱形继承导致数据有两份，造成资源浪费

	cout<<"st.m_age="<<st.m_age<<endl;
}
int main()
{
	test01();
	system("pause");
	return 0;
}
