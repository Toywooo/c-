#include<iostream>
using namespace std;

class myinteger
{
	friend ostream & operator<<(ostream &cout,myinteger myint);
public:
	myinteger()
	{
		m_num=0;
	}
	//重置前置++运算符
	 myinteger & operator++()//如果返回值不返回引用，则执行++(++myint)后，若输出myint则为只进行了一次自加的数值
	{
		m_num++;
		return *this;
	}
	 //后置返回的是值，不是引用。如果返回引用，返回的是一个局部的对象的引用，该对象在当前函数执行完后被释放，无法返回
	 //因此后置递增无法进行(myint++)++的计算
	 myinteger operator++(int)//int为占位参数，无意义，可以用于区分前置和后置递增，编译器会认为该函数为后置的自增
	 {
		myinteger temp=*this;//先记录当前结果，后递增，最后将记录结果做返回
		m_num++;
		return temp;
	 }
private:
	int m_num;
};
//重载左移运算符
ostream & operator<<(ostream &cout,myinteger myint)
{
	cout<<myint.m_num;//m_num为私有成员，外部函数不可以访问，需加友元
	return cout;
}

void test01()
{
	myinteger myint;
	cout<<++(++myint)<<endl;
	cout<<myint<<endl;//使用引用两个输出均为2，不使用引用两个输出分别为2和1，返回引用是为了一直对一个数据进行递增操作
}
void test02()
{
	myinteger myint;
}
int main()
{
	test01();
	test02();
	system("pause");
	return 0;
}
